#!/usr/bin/env python3
# auto_generate.py
# Generates a Jekyll post for a static site (no raw Liquid escaping).
# Produces front matter and markdown content that includes:
#  - Markdown header image
#  - {% include ad.html %} inserted correctly
#  - Friendly backlinks list (single block)
#  - UTF-8 safe writing

import os, datetime, random, pathlib, sys

DOMAINS = [
    'bottradingai.com','botgame.io','metaversebot.io','nftgameai.com',
    'hubgaming.io','botdefi.io','esportsai.io','nftgamepro.com',
    'botesports.com','aiesports.io','pronftgame.com','botplay.io',
    'botweb3ai.com','botblockchain.io'
]

IMAGES = {
    # a small sample pool per domain; replace or expand as needed.
    'nftgameai.com': [
        'https://picsum.photos/1200/630?random=101',
        'https://picsum.photos/1200/630?random=102',
        'https://picsum.photos/1200/630?random=103'
    ],
    'default': [
        'https://picsum.photos/1200/630?random=201',
        'https://picsum.photos/1200/630?random=202',
        'https://picsum.photos/1200/630?random=203'
    ]
}

TOPICS = [
  "Blockchain-driven Rewards in NFT Games",
  "How Play-to-Earn Is Evolving in 2025",
  "Tokenomics that Actually Work for Players",
  "AI Tools for Better NFT Game Design",
  "Player-Owned Economies & Governance"
]

def pick_image(domain):
    pool = IMAGES.get(domain, IMAGES.get('default', []))
    return random.choice(pool) if pool else ''

def pick_backlinks(domain):
    others = [d for d in DOMAINS if d != domain]
    random.shuffle(others)
    pick = others[:5]   # show up to 5 friendly links inline
    return "\n".join([f"- [{d}](https://{d})" for d in pick])

def slugify(title):
    s = title.lower()
    # keep simple: letters, numbers, hyphen
    s = ''.join([c if c.isalnum() else '-' for c in s])
    while '--' in s:
        s = s.replace('--','-')
    return s.strip('-')

def generate_md(domain):
    today = datetime.date.today()
    iso = today.isoformat()
    title = random.choice(TOPICS)
    image = pick_image(domain)
    desc = title + " â€” concise insights for builders & players."
    backlinks_md = pick_backlinks(domain)

    # Template uses a placeholder __AD__ to inject the Liquid include after format()
    template = (
        "---\n"
        "layout: post\n"
        "title: \"{title}\"\n"
        "date: {date}\n"
        "author: \"NFTGameAI Team\"\n"
        "description: \"{desc}\"\n"
        "image: \"{image}\"\n"
        "---\n\n"
        "_This post was auto-generated by NFTGameAI engine._\n\n"
        # top image (markdown)
        "![{title}]({image})\n\n"
        "__AD__\n\n"
        "### Key Highlights\n\n"
        "- Innovation through NFTs and on-chain rewards\n"
        "- Player-owned economies and token design\n"
        "- Design patterns for long-term engagement\n\n"
        "### Friendly Network\n\n"
        "{backlinks_md}\n\n"
        "---\n\n"
        "## What's changing\n\n"
        "Short analysis and actionable notes for developers and players.\n\n"
        "## Read more\n\n"
        "- [Explore similar articles](/)\n"
    )

    content = template.format(
        title=title,
        date=iso,
        desc=desc.replace('"',''),
        image=image,
        backlinks_md=backlinks_md
    )

    # Now replace the __AD__ token with the exact Liquid include WITHOUT escaping braces.
    # We must insert the Jekyll include exactly: {% include ad.html %}
    content = content.replace("__AD__", "{% include ad.html %}")

    # filename
    slug = slugify(title)
    filename = f"_posts/{iso}-{slug}.md"
    return filename, content

def main():
    # Determine domain: env SITE_DOMAIN else folder name
    domain = os.environ.get("SITE_DOMAIN", "").strip()
    if not domain:
        domain = os.path.basename(os.getcwd()).strip()
    if not os.path.exists("_posts"):
        os.makedirs("_posts", exist_ok=True)

    fn, content = generate_md(domain)
    # Avoid overwriting: if exists, append random suffix
    if os.path.exists(fn):
        base, ext = os.path.splitext(fn)
        fn = f"{base}-{random.randint(100,999)}{ext}"

    with open(fn, "w", encoding="utf-8") as f:
        f.write(content)
    print("Wrote:", fn)

if __name__ == "__main__":
    main()
