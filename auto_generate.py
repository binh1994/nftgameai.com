#!/usr/bin/env python3
# Auto-generate new Jekyll post safely (no f-string syntax errors)
import os, datetime, random, textwrap, requests

DOMAINS = [
    "nftgameai.com", "botgame.io", "metaversebot.io", "hubgaming.io",
    "botdefi.io", "botweb3ai.com", "bottradingai.com",
    "botplay.io", "botblockchain.io", "nftgamepro.com",
    "botesports.com", "esportsai.io", "aiesports.io", "pronftgame.com"
]

IMAGES = [
    "https://images.pexels.com/photos/8370753/pexels-photo-8370753.jpeg",
    "https://images.pexels.com/photos/8390113/pexels-photo-8390113.jpeg",
    "https://images.pexels.com/photos/5961226/pexels-photo-5961226.jpeg"
]

TOPICS = [
    "AI in NFT Game Economy Design",
    "Metaverse Gaming with Generative AI",
    "Blockchain-driven Rewards in NFT Games",
    "How AI Personalizes Play-to-Earn Experiences",
    "Building Sustainable NFT Game Worlds"
]

def pick_backlinks(domain):
    """Select up to 5 backlinks safely"""
    others = [d for d in DOMAINS if d != domain]
    random.shuffle(others)
    return "\n".join(["- [%s](https://%s)" % (d, d) for d in others[:5]])

def create_post():
    domain = os.environ.get("SITE_DOMAIN", "nftgameai.com")
    title = random.choice(TOPICS)
    date = datetime.date.today().isoformat()
    desc = title + " — fresh AI insights."
    image = random.choice(IMAGES)
    backlinks = pick_backlinks(domain)

    # Template without f-string (use placeholders instead)
    template = textwrap.dedent("""\
    ---
    layout: post
    title: "__TITLE__"
    date: __DATE__
    author: "Auto Bot"
    description: "__DESC__"
    image: "__IMAGE__"
    ---

    This post was auto-generated by NFTGameAI engine.

    {% raw %}{% include ad.html %}{% endraw %}

    ## Key Highlights
    - AI innovation
    - NFT integration
    - Future metaverse design

    ### Friendly Network
    __BACKLINKS__
    """)

    content = (
        template
        .replace("__TITLE__", title)
        .replace("__DATE__", date)
        .replace("__DESC__", desc)
        .replace("__IMAGE__", image)
        .replace("__BACKLINKS__", backlinks)
    )

    # Ensure _posts/ exists
    os.makedirs("_posts", exist_ok=True)
    slug = title.lower().replace(" ", "-").replace("/", "-")
    filename = "_posts/%s-%s.md" % (date, slug)
    with open(filename, "w", encoding="utf-8") as f:
        f.write(content)
    print("✅ New post created:", filename)

    # Optional: Ping Google
    try:
        sitemap = "https://{}/sitemap.xml".format(domain)
        ping_url = "https://www.google.com/ping?sitemap=" + sitemap
        requests.get(ping_url, timeout=10)
        print("✅ Pinged Google:", ping_url)
    except Exception as e:
        print("⚠️ Ping failed:", e)

if __name__ == "__main__":
    create_post()
